# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getPostDocument(relativePath: String): PostDocument!
  getPostList(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  getTeamDocument(relativePath: String): TeamDocument!
  getTeamList(before: String, after: String, first: Float, last: Float, sort: String): TeamConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = PostDocument | TeamDocument

type Post {
  title: String
  date: String
  draft: Boolean
  body: String
}

type PostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Post!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostConnectionEdges {
  cursor: String
  node: PostDocument
}

type PostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Team {
  published: Boolean
  name: String
  position: String
  bio: JSON
  photo: String
  linkedin_url: String
  twitter_url: String
}

type TeamDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Team!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type TeamConnectionEdges {
  cursor: String
  node: TeamDocument
}

type TeamConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [TeamConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  createPostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  updateTeamDocument(relativePath: String!, params: TeamMutation!): TeamDocument!
  createTeamDocument(relativePath: String!, params: TeamMutation!): TeamDocument!
}

input DocumentMutation {
  post: PostMutation
  team: TeamMutation
}

input PostMutation {
  title: String
  date: String
  draft: Boolean
  body: String
}

input TeamMutation {
  published: Boolean
  name: String
  position: String
  bio: JSON
  photo: String
  linkedin_url: String
  twitter_url: String
}

schema {
  query: Query
  mutation: Mutation
}
  